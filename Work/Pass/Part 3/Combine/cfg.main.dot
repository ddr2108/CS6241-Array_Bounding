digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x21c1200 [shape=record,label="{entry:\l  %retval = alloca i32, align 4\l  %d = alloca i32, align 4\l  %z = alloca i32, align 4\l  %k = alloca i32, align 4\l  %l = alloca i32, align 4\l  %j = alloca i32, align 4\l  %f = alloca i32, align 4\l  %m = alloca [5 x i32], align 16\l  store i32 0, i32* %retval\l  call void @llvm.dbg.declare(metadata !\{i32* %d\}, metadata !12), !dbg !13\l  call void @llvm.dbg.declare(metadata !\{i32* %z\}, metadata !14), !dbg !13\l  call void @llvm.dbg.declare(metadata !\{i32* %k\}, metadata !15), !dbg !13\l  call void @llvm.dbg.declare(metadata !\{i32* %l\}, metadata !16), !dbg !13\l  call void @llvm.dbg.declare(metadata !\{i32* %j\}, metadata !17), !dbg !13\l  call void @llvm.dbg.declare(metadata !\{i32* %f\}, metadata !18), !dbg !13\l  call void @llvm.dbg.declare(metadata !\{[5 x i32]* %m\}, metadata !19), !dbg\l... !23\l  store i32 15, i32* %d, align 4, !dbg !24\l  store i32 15, i32* %z, align 4, !dbg !25\l  %arrayidx = getelementptr inbounds [5 x i32]* %m, i32 0, i64 4, !dbg !26\l  %0 = load i32* %arrayidx, align 4, !dbg !26\l  %add = add nsw i32 10, %0, !dbg !26\l  store i32 %add, i32* %l, align 4, !dbg !26\l  %arrayidx1 = getelementptr inbounds [5 x i32]* %m, i32 0, i64 4, !dbg !27\l  %1 = load i32* %arrayidx1, align 4, !dbg !27\l  %add2 = add nsw i32 10, %1, !dbg !27\l  store i32 %add2, i32* %d, align 4, !dbg !27\l  %2 = load i32* %z, align 4, !dbg !28\l  %add3 = add nsw i32 10, %2, !dbg !28\l  store i32 %add3, i32* %d, align 4, !dbg !28\l  %3 = load i32* %z, align 4, !dbg !29\l  %cmp = icmp sgt i32 %3, 15, !dbg !29\l  br i1 %cmp, label %if.then, label %if.else, !dbg !29\l|{<s0>T|<s1>F}}"];
	Node0x21c1200:s0 -> Node0x21c1260;
	Node0x21c1200:s1 -> Node0x21c12c0;
	Node0x21c1260 [shape=record,label="{if.then:                                          \l  store i32 5, i32* %k, align 4, !dbg !31\l  br label %if.end, !dbg !33\l}"];
	Node0x21c1260 -> Node0x21c1320;
	Node0x21c12c0 [shape=record,label="{if.else:                                          \l  store i32 10, i32* %k, align 4, !dbg !34\l  br label %if.endclone\l}"];
	Node0x21c12c0 -> Node0x21dc000;
	Node0x21c1320 [shape=record,label="{if.end:                                           \l  %4 = load i32* %k, align 4, !dbg !36\l  %add4 = add nsw i32 %4, 5, !dbg !36\l  store i32 %add4, i32* %l, align 4, !dbg !36\l  %5 = load i32* %d, align 4, !dbg !37\l  %add5 = add nsw i32 %5, 5, !dbg !37\l  store i32 %add5, i32* %f, align 4, !dbg !37\l  %6 = load i32* %z, align 4, !dbg !38\l  %cmp6 = icmp sgt i32 %6, 5, !dbg !38\l  br i1 %cmp6, label %if.then7, label %if.else8, !dbg !38\l|{<s0>T|<s1>F}}"];
	Node0x21c1320:s0 -> Node0x21c1380;
	Node0x21c1320:s1 -> Node0x21c13e0;
	Node0x21c1380 [shape=record,label="{if.then7:                                         \l  store i32 25, i32* %j, align 4, !dbg !40\l  br label %if.end9, !dbg !42\l}"];
	Node0x21c1380 -> Node0x21c1440;
	Node0x21c13e0 [shape=record,label="{if.else8:                                         \l  store i32 9, i32* %k, align 4, !dbg !43\l  br label %if.end9\l}"];
	Node0x21c13e0 -> Node0x21c1440;
	Node0x21c1440 [shape=record,label="{if.end9:                                          \l  %GVN = load i32* %d, align 4\l  store i32 %GVN, i32* %l, align 4\l  %7 = load i32* %d, align 4, !dbg !45\l  %add11 = add nsw i32 %7, 5, !dbg !45\l  store i32 %add11, i32* %l, align 4, !dbg !45\l  %GVN1 = load i32* %l, align 4\l  store i32 %GVN1, i32* %f, align 4\l  %8 = load i32* %retval, !dbg !46\l  ret i32 %8, !dbg !46\l}"];
	Node0x21dc000 [shape=record,label="{if.endclone:                                      \l  %9 = load i32* %k, align 4, !dbg !36\l  %add4clone = add nsw i32 %9, 5, !dbg !36\l  store i32 %add4clone, i32* %l, align 4, !dbg !36\l  %10 = load i32* %d, align 4, !dbg !37\l  %add5clone = add nsw i32 %10, 5, !dbg !37\l  store i32 %add5clone, i32* %f, align 4, !dbg !37\l  %11 = load i32* %z, align 4, !dbg !38\l  %cmp6clone = icmp sgt i32 %11, 5, !dbg !38\l  br i1 %cmp6clone, label %if.then7, label %if.else8, !dbg !38\l|{<s0>T|<s1>F}}"];
	Node0x21dc000:s0 -> Node0x21c1380;
	Node0x21dc000:s1 -> Node0x21c13e0;
}
